{"version":3,"sources":["utils/TrelloService.tsx","components/SelectBoards.tsx","components/Container.tsx","pages/ChoiceBoard.tsx","components/Empty.tsx","components/TableListWithCards.tsx","components/Loading.tsx","components/NoPrint.tsx","pages/Board.tsx","pages/Login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["uri","appKey","token","localStorage","getItem","requestGet","url","a","fetch","response","json","console","log","window","location","replace","process","fetchBoards","fetchLists","boardId","fetchCards","listId","fetchBoard","SelectBoards","props","onSelect","useState","boards","setBoards","loading","setLoading","useEffect","then","className","disabled","onChange","e","boardSelected","find","b","id","target","value","handleChange","map","board","key","name","defaultProps","Container","styled","div","Box","ChoiceBoard","setLists","setBoard","lists","undefined","to","Empty","title","Footer","TableListWithCards","list","data-badge","totalCard","style","pageBreakInside","width","cards","card","pageBreakAfter","href","shortUrl","rel","date","objDate","parseISO","format","formatDate","dateLastActivity","ProgressBar","Bar","span","Progress","ProgressBarLoading","Loading","NoPrint","Board","useParams","boardTrello","setBoardTrello","listsTrello","setListsTrello","getCardsByListId","handleBoardFetch","Promise","all","length","handleListFetch","marginTop","onClick","print","marginRight","regexToken","params","scope","expiration","response_type","callback_method","interactive","redirect_uri","persist","Login","redirectToChoiceBoard","tokenLocalStorage","isAuthorized","exec","hash","setItem","URLparams","URLSearchParams","Object","entries","toString","handleLogin","NotFound","App","basename","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cd6e5229.chunk.js","sourcesContent":["const uri = \"https://api.trello.com/\";\nexport const appKey = \"1476e4d6cc0bec828338050c24381b18\";\nexport const appSecret = \"dc741abe2a661c7cc7b9727d0297bb4f8e46815512c7a7e3223b68ccd012d018\";\nconst token = localStorage.getItem('token') || '';\n\nexport type CardType = {\n    name: string,\n    id: string,\n    shortUrl: string,\n    dateLastActivity: string,\n    desc: string,\n    closed: boolean\n}\n\nexport type ListType = {\n    name: string,\n    id: string,\n    cards: CardType[],\n    totalCard: number\n}\n\nexport type BoardType = {\n    name: string,\n    id: string,\n    url: string,\n    desc: string,\n    shortUrl: string\n}\n\nconst redirectToLogin = () => window.location.replace(`${process.env.PUBLIC_URL}`);\n\nconst requestGet = async (url: string) => {\n    try {\n        const response = await fetch(url);\n        return await response.json();\n    }\n    catch (err) {\n        console.log(err);\n        redirectToLogin();\n    }\n}\n\nexport const fetchBoards = async () => requestGet(`${uri}1/members/me/boards?fields=name,id,url,list&key=${appKey}&token=${token}`);\nexport const fetchLists = async (boardId: string) => requestGet(`${uri}1/boards/${boardId}/lists?fields=name,id&key=${appKey}&token=${token}`);\nexport const fetchCards = async (listId: string) => requestGet(`${uri}1/lists/${listId}/cards?key=${appKey}&token=${token}`);\nexport const fetchBoard = async (boardId: string) => requestGet(`${uri}1/boards/${boardId}?key=${appKey}&token=${token}`);","import React, { useState, useEffect, ChangeEvent } from 'react';\nimport { BoardType, fetchBoards } from '../utils/TrelloService';\n\ninterface SelectBoardProps {\n    onSelect(board?: BoardType): void\n}\n\nconst SelectBoards = (props: SelectBoardProps) => {\n    const { onSelect } = props;\n    const [boards, setBoards] = useState<BoardType[]>([]);\n    const [loading, setLoading] = useState(false);\n\n    const handleFetchBoard = () => {\n        setLoading(true);\n        fetchBoards().then((boards) => {\n            setBoards(boards);\n            setLoading(false);\n        });\n    };\n\n    const handleChange = (e: ChangeEvent<HTMLSelectElement>) => {\n        const boardSelected = boards.find((b) => b.id === e.target.value);\n        onSelect(boardSelected);\n    };\n\n    useEffect(() => {\n        handleFetchBoard();\n    }, []);\n\n    return <div className=\"form-group\">\n        <label className=\"form-label\">Choice the board</label>\n        <select className=\"form-select\" disabled={loading} onChange={(e) => handleChange(e)}>\n            <option value=\"\">{loading ? 'Loading...' : ''}</option>\n            {boards.map((board) => <option key={board.id} value={board.id}>{board.name}</option>)}\n        </select>\n    </div>\n}\n\nSelectBoards.defaultProps = {\n    onSelect: () => { }\n}\n\nexport default SelectBoards;","import styled from 'styled-components'\n\nconst Container = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: #F7F8F9;\n    height: 100vh;\n    width: 100vw;\n`;\n\nexport default Container;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport SelectBoards from '../components/SelectBoards';\nimport Chip from '../components/Chip';\nimport { Link } from \"react-router-dom\";\nimport { BoardType, ListType, fetchLists } from '../utils/TrelloService';\nimport Container from '../components/Container';\n\nconst Box = styled.div`\n    width: 400px;\n    height: 400px;\n`;\n\nconst ChoiceBoard = () => {\n    const [lists, setLists] = useState<ListType[]>([]);    \n    const [board, setBoard] = useState<BoardType>();\n\n    const handleSelectedBoard = (boardSelected?: BoardType) => {\n        if (boardSelected) {\n            setBoard(boardSelected);            \n            fetchLists(boardSelected.id)\n                .then((lists) => {\n                    setLists(lists);\n                });\n        }\n        else{\n            setBoard(undefined);\n            setLists([]);\n        }\n    };\n\n    return <Container>\n        <Box>\n            <div className=\"card\">\n                <div className=\"card-header\">\n                    <div className=\"card-title h5\">React Trello Report</div>\n                </div>\n                <div className=\"card-body\">\n                    <SelectBoards onSelect={(board) => handleSelectedBoard(board)} />\n                    {/*lists.length > 0 && lists.map((list) => <Chip key={list.id} text={list.name} />)*/}\n                </div>\n                <div className=\"card-footer\">\n                    {board\n                        ? <Link className=\"btn btn-primary\" to={`/board/${board.id}`}>Generate</Link>\n                        : <button className=\"btn btn-primary\" disabled >Generate</button>\n                    }\n                </div>\n            </div>\n        </Box>\n    </Container>\n}\n\nexport default ChoiceBoard;","import React from 'react';\n\ninterface EmptyProps {\n    title: string\n}\n\nconst Empty = (props: EmptyProps) => {\n    const { title } = props;\n    return <div className=\"empty\">\n        <div className=\"empty-icon\">\n            <i className=\"icon icon-people\"></i>\n        </div>\n        <p className=\"empty-title h5\">{title}</p>\n    </div>\n}\n\nexport default Empty;","import React from 'react';\nimport { ListType } from '../utils/TrelloService';\nimport styled from 'styled-components';\nimport { format, parseISO } from 'date-fns';\nimport Empty from '../components/Empty';\n\ninterface TableListWithCardsProps {\n    list: ListType\n}\n\nconst Box = styled.div`\n    margin-bottom: 30px;    \n`;\n\nconst Footer = styled.div`\n display: block; \n page-break-before: always;\n`;\n\n\nconst TableListWithCards = (props: TableListWithCardsProps) => {\n    const { list } = props;\n    \n    const formatDate = (date: string) => {\n        const objDate = parseISO(date);\n        return format(objDate, 'dd/MM/yyyy HH:mm:ss');\n    };\n\n    return <Box>\n        <div className=\"card\">\n            <div className=\"card-header\">\n                <div className=\"card-title\">\n                    <div className=\"h4 badge\" data-badge={list.totalCard}>{list.name}</div>\n                </div>\n            </div>\n            {list.totalCard === 0\n                ? <Empty title=\"No cards found\" />\n                :\n                <div className=\"card-body\">\n                    <table style={{ pageBreakInside: 'auto' }} className=\"table table-striped table-hover\">\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th style={{ width: '150px' }}>URL</th>\n                                <th style={{ width: '180px' }}>Date</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {list.cards.map((card) => (\n                                <tr key={card.id} style={{ pageBreakInside: 'avoid', pageBreakAfter: 'auto' }}>\n                                    <td>{card.name}</td>\n                                    <td><a href={card.shortUrl} target=\"_blank\" rel=\"noopener noreferrer\">{card.shortUrl}</a></td>\n                                    <td>{formatDate(card.dateLastActivity)}</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                    <Footer />\n                </div>\n            }\n        </div>\n    </Box>\n}\n\n\nexport default TableListWithCards;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Spinner = styled.div`\n    height: 60px;\n    width: 60px;\n    border: 8px solid #e5e5ff;\n    border-left-color: #4240D4;\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n\n    @keyframes spin {\n        to { transform: rotate(360deg);}\n    }\n`;\n\nconst ProgressBar = styled.div`\n    border-radius: 60px;\n\toverflow: hidden;\n    width: 100%;\n    left: 50%;\n    max-width: 50%;\n    position: absolute;\n    top: 50%;\n    transform: translate3d(-50%,-50%,0);\n`;\n\nconst Bar = styled.span`\n    background: #e5e5ff;\n    display: block;\n`;\n\nconst Progress = styled.span`\n    animation: loader 2s ease infinite;\n    background: #4240D4;\n    display: block;    \n    padding: 10px;\n    width: 0;\n\n    @keyframes loader {\n        0% { width: 0 }\n        100% { width: 100% }\n    }\n`;\n\n\nconst ProgressBarLoading = () => (\n    <ProgressBar>\n        <Bar>\n            <Progress></Progress>\n        </Bar>\n    </ProgressBar>\n);\n\n\n\nconst Loading = () => {\n    return <ProgressBarLoading />\n}\n\nexport default Loading;","import styled from 'styled-components'\n\nconst NoPrint = styled.div`\n    @media print\n    {    \n        display: none !important;\n    }\n`;\n\nexport default NoPrint;","import React, { useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\n//import Markdown from 'react-markdown';\nimport { Link } from \"react-router-dom\";\nimport { fetchLists, fetchBoard, fetchCards, ListType, BoardType } from '../utils/TrelloService';\nimport TableListWithCards from '../components/TableListWithCards';\nimport styled from 'styled-components';\nimport Loading from '../components/Loading';\nimport Empty from '../components/Empty';\nimport NoPrint from '../components/NoPrint';\n\nconst Box = styled.div`\n    width: 90vw;  \n    @media print {\n        width: 100vw; \n    }\n`;\n\nconst Board: React.SFC = () => {\n    let { boardId } = useParams();\n\n    const [boardTrello, setBoardTrello] = useState<BoardType>();\n    const [listsTrello, setListsTrello] = useState<ListType[]>([]);\n    const [loading, setLoading] = useState(false);\n\n    const handleBoardFetch = (boardId: string) => fetchBoard(boardId).then((board) => board && setBoardTrello(board));\n\n    const getCardsByListId = async (listId: string) => await fetchCards(listId).then((cards) => cards);\n\n    const handleListFetch = (boardId: string) => {\n        setLoading(true);\n        fetchLists(boardId).then((lists: ListType[]) => {\n            if (lists) {\n                Promise.all(lists.map(async (list: ListType) => {\n                    const cards = await getCardsByListId(list.id);\n                    list.totalCard = cards.length;\n                    list.cards = cards;\n                    return list;\n                })).then((lists: ListType[]) => {\n                    setListsTrello(lists);\n                    setLoading(false);\n                });\n            }\n        });\n    };\n    \n    const handlePrint = () => {\n        window.print();\n    };\n\n    useEffect(() => {\n        handleBoardFetch(boardId);\n        handleListFetch(boardId);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [boardId]);\n\n    return <Box className=\"container\">\n        <div className=\"columns\">\n            <div className=\"column col-6\">\n                <div className=\"h3\">{boardTrello?.name || ''}</div>\n                <p><a href={boardTrello?.shortUrl} target=\"_blank\" rel=\"noopener noreferrer\">{boardTrello?.shortUrl}</a></p>\n            </div>\n            <div className=\"column col-6\">\n                <NoPrint>\n                    <div className=\"float-right\" style={{ marginTop: 20 }}>\n                        <button className=\"btn btn-lg btn-primary\" onClick={(e) => handlePrint()} style={{marginRight: 5}}>Print</button>\n                        <Link to=\"/\" className=\"btn btn-lg\">Back</Link>\n                    </div>\n                </NoPrint>\n            </div>\n        </div>        \n        {loading\n            ? <Loading />\n            : listsTrello.length <= 0 ? <Empty title=\"No list found\" /> : listsTrello.map((list) => <TableListWithCards key={list.id} list={list} />)\n        }\n    </Box>\n}\n\nexport default Board;","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport Container from '../components/Container';\nimport { appKey } from '../utils/TrelloService';\n\nconst regexToken = /[&#]?token=([0-9a-f]{64})/;\n\nconst uri = 'http://trello.com/';\n\nconst Box = styled.div`\n    width: 300px;\n    height: 300px;\n`;\n\nconst params = {\n    name: \"Trello Report React\",\n    scope: 'read',\n    expiration: 'never',\n    response_type: 'token',\n    key: appKey,\n    callback_method: 'fragment',\n    interactive: 'true',\n    redirect_uri: window.location.href,\n    persist: 'true'\n};\n\nconst Login = () => {\n    const handleLogin = () => {\n        const URLparams = new URLSearchParams(Object.entries(params));\n        const url = `${uri}1/authorize?${URLparams.toString()}`;\n        window.location.href = url;\n    };\n\n    const isAuthorized = () => {\n        const tokenLocalStorage = localStorage.getItem('token') || '';\n        return tokenLocalStorage && tokenLocalStorage.length === 64;\n    };\n\n    const redirectToChoiceBoard = () => window.location.replace(`${process.env.PUBLIC_URL}#choice-board`);\n\n    useEffect(() => {        \n        if (isAuthorized()) {\n            redirectToChoiceBoard();\n        }\n        else {\n            const token = regexToken.exec(window.location.hash) || '';\n            \n            if (token && token[1]) {\n                localStorage.setItem('token', token[1]);\n                redirectToChoiceBoard();\n            }\n        }\n    }, []);\n\n    return <Container>\n        <Box>\n            <div className=\"card\">\n                <div className=\"card-header\">\n                    <div className=\"card-title h5\">Login at Trello</div>\n                </div>\n                <div className=\"card-body\"></div>\n                <div className=\"card-footer\">\n                    <button className=\"btn btn-primary\" onClick={(e) => handleLogin()}>Login</button>\n                </div>\n            </div>\n        </Box>\n    </Container>\n}\n\nexport default Login;","import React from 'react';\nimport {    \n    HashRouter,\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport ChoiceBoard from './pages/ChoiceBoard';\nimport Board from './pages/Board';\nimport Empty from './components/Empty';\nimport Container from './components/Container';\nimport Login from './pages/Login';\n\nconst NotFound = () => <Container><Empty title=\"Not Found\" /></Container>;\n\nconst App = () => {\n    return <>\n        <HashRouter basename={process.env.PUBLIC_URL}> \n            <Switch>\n                <Route exact={true} path=\"/board/:boardId\">\n                    <Board />\n                </Route>\n                <Route exact={true} path=\"/choice-board\">\n                    <ChoiceBoard />\n                </Route>\n                <Route exact={true} path=\"/*\">\n                    <Login />\n                </Route>\n                <Route exact={true} path='*' component={NotFound} />\n            </Switch>\n        </HashRouter>\n    </>\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'spectre.css';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}