{"version":3,"sources":["utils/TrelloService.tsx","components/SelectBoards.tsx","components/Chip.tsx","components/Container.tsx","pages/ChoiceBoard.tsx","components/TableListWithCards.tsx","pages/Board.tsx","components/Empty.tsx","pages/Login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["uri","appKey","token","localStorage","getItem","fetchBoards","a","fetch","response","json","fetchLists","boardId","fetchCards","listId","fetchBoard","SelectBoards","props","onSelect","useState","boards","setBoards","useEffect","then","className","onChange","e","boardSelected","find","b","id","target","value","handleChange","map","board","key","name","defaultProps","Chips","text","href","aria-label","role","Container","styled","div","Box","ChoiceBoard","lists","setLists","setBoard","undefined","length","list","Chip","to","disabled","Footer","TableListWithCards","data-badge","totalCard","style","pageBreakInside","width","cards","card","pageBreakAfter","shortUrl","rel","dateLastActivity","Board","useParams","boardTrello","setBoardTrello","listsTrello","setListsTrello","getCardsByListId","handleBoardFetch","Promise","all","handleListFetch","Empty","title","regexToken","params","scope","expiration","response_type","callback_method","interactive","redirect_uri","window","location","persist","Login","redirectToChoiceBoard","replace","tokenLocalStorage","isAuthorized","exec","hash","setItem","onClick","URLparams","URLSearchParams","Object","entries","url","toString","handleLogin","NotFound","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fe1b627b.chunk.js","sourcesContent":["const uri = \"https://api.trello.com/\";\nexport const appKey = \"1476e4d6cc0bec828338050c24381b18\";\nexport const appSecret = \"dc741abe2a661c7cc7b9727d0297bb4f8e46815512c7a7e3223b68ccd012d018\";\nconst token = localStorage.getItem('token') || '';\n\nexport type CardType = {\n    name: string,\n    id: string,\n    shortUrl: string,\n    dateLastActivity: string,\n    desc: string,\n    closed: boolean\n}\n\nexport type ListType = {\n    name: string,\n    id: string,\n    cards: CardType[],\n    totalCard: number\n}\n\nexport type BoardType = {\n    name: string,\n    id: string,\n    url: string,\n    desc: string,\n    shortUrl: string    \n}\n\nexport const fetchBoards = async () => {\n    const response = await fetch(`${uri}1/members/me/boards?fields=name,id,url,list&key=${appKey}&token=${token}`);\n    return await response.json();\n}\n\nexport const fetchLists = async (boardId: string) => {\n    const response = await fetch(`${uri}1/boards/${boardId}/lists?fields=name,id&key=${appKey}&token=${token}`);\n    return await response.json();\n}\n\nexport const fetchCards = async (listId: string) => {\n    const response = await fetch(`${uri}1/lists/${listId}/cards?key=${appKey}&token=${token}`);\n    return await response.json();\n}\n\nexport const fetchBoard = async (boardId: string) => {\n    const response = await fetch(`${uri}1/boards/${boardId}?key=${appKey}&token=${token}`);\n    return await response.json();\n}\n","import React, { useState, useEffect, ChangeEvent } from 'react';\nimport { BoardType, fetchBoards } from '../utils/TrelloService';\n\ninterface SelectBoardProps {\n    onSelect(board?: BoardType): void\n}\n\nconst SelectBoards = (props: SelectBoardProps) => {\n    const { onSelect } = props;\n    const [boards, setBoards] = useState<BoardType[]>([]);\n\n    const handleFetchBoard = () => {\n        fetchBoards().then((boards) => setBoards(boards));\n    };\n\n    const handleChange = (e: ChangeEvent<HTMLSelectElement>) => {\n        const boardSelected = boards.find((b) => b.id === e.target.value);\n        onSelect(boardSelected);\n    };\n\n    useEffect(() => {\n        handleFetchBoard();\n    }, []);\n\n    return <div className=\"form-group\">\n        <label className=\"form-label\">Choice the board</label>\n        <select className=\"form-select\" onChange={(e) => handleChange(e)}>\n            <option value=\"\"></option>\n            {boards.map((board) => <option key={board.id} value={board.id}>{board.name}</option>)}\n        </select>\n    </div>\n}\n\nSelectBoards.defaultProps = {\n    onSelect: () => { }\n}\n\nexport default SelectBoards;","/* eslint-disable jsx-a11y/anchor-has-content */\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\n\ninterface ChipsProps {\n    text: string;\n}\n\nconst Chips = (props: ChipsProps) => {\n    const { text } = props;\n    return <>\n        <span className=\"chip\">\n            {text} <a href=\"#\" className=\"btn btn-clear\" aria-label=\"Close\" role=\"button\"></a>\n        </span>\n    </>\n}\n\nexport default Chips;","import styled from 'styled-components'\n\nconst Container = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: #F7F8F9;\n    height: 100vh;\n    width: 100vw;\n`;\n\nexport default Container;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport SelectBoards from '../components/SelectBoards';\nimport Chip from '../components/Chip';\nimport { Link } from \"react-router-dom\";\nimport { BoardType, ListType, fetchLists } from '../utils/TrelloService';\nimport Container from '../components/Container';\n\nconst Box = styled.div`\n    width: 400px;\n    height: 400px;\n`;\n\nconst ChoiceBoard = () => {\n    const [lists, setLists] = useState<ListType[]>([]);\n    const [board, setBoard] = useState<BoardType>();\n\n    const handleSelectedBoard = (boardSelected?: BoardType) => {\n        if (boardSelected) {\n            setBoard(boardSelected);\n            fetchLists(boardSelected.id)\n                .then((lists) => {\n                    setLists(lists);\n                });\n        }\n        else{\n            setBoard(undefined);\n            setLists([]);\n        }\n    };\n\n    return <Container>\n        <Box>\n            <div className=\"card\">\n                <div className=\"card-header\">\n                    <div className=\"card-title h5\">React Trello</div>\n                </div>\n                <div className=\"card-body\">\n                    <SelectBoards onSelect={(board) => handleSelectedBoard(board)} />\n                    {lists.length > 0 && lists.map((list) => <Chip key={list.id} text={list.name} />)}\n                </div>\n                <div className=\"card-footer\">\n                    {board\n                        ? <Link className=\"btn btn-primary\" to={`/board/${board.id}`}>Generate</Link>\n                        : <button className=\"btn btn-primary\" disabled >Generate</button>\n                    }\n                </div>\n            </div>\n        </Box>\n    </Container>\n}\n\nexport default ChoiceBoard;","import React from 'react';\nimport { ListType } from '../utils/TrelloService';\nimport styled from 'styled-components';\n\ninterface TableListWithCardsProps {\n    list: ListType\n}\n\nconst Box = styled.div`\n    margin-top: 20px;    \n`;\n\nconst Footer = styled.div`\n display: block; \n page-break-before: always;\n`;\n\n\nconst TableListWithCards = (props: TableListWithCardsProps) => {\n    const { list } = props;\n    return <Box>\n        <div className=\"card\">\n            <div className=\"card-header\">\n                <div className=\"card-title h3 badge\" data-badge={list.totalCard}>{list.name}</div>\n            </div>\n            <div className=\"card-body\">\n                <table style={{ pageBreakInside: 'auto' }} className=\"table table-striped table-hover\">\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th style={{ width: '150px' }}>URL</th>\n                            <th style={{ width: '200px' }}>Date</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {list.cards.map((card) => (\n                            <tr key={card.id} style={{ pageBreakInside: 'avoid', pageBreakAfter: 'auto' }}>\n                                <td>{card.name}</td>\n                                <td><a href={card.shortUrl} target=\"_blank\" rel=\"noopener noreferrer\">{card.shortUrl}</a></td>\n                                <td>{card.dateLastActivity}</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n                <Footer />\n            </div>\n        </div>\n    </Box>\n}\n\n\nexport default TableListWithCards;","import React, { useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\n//import Markdown from 'react-markdown';\nimport { Link } from \"react-router-dom\";\nimport { fetchLists, fetchBoard, fetchCards, ListType, BoardType } from '../utils/TrelloService';\nimport TableListWithCards from '../components/TableListWithCards';\n\nconst Board: React.SFC = () => {\n    let { boardId } = useParams();\n    const [boardTrello, setBoardTrello] = useState<BoardType>();\n    const [listsTrello, setListsTrello] = useState<ListType[]>([]);\n    const handleBoardFetch = (boardId: string) => fetchBoard(boardId).then((board) => board && setBoardTrello(board));    \n    const getCardsByListId = async (listId: string) => await fetchCards(listId).then((cards) => cards);    \n    const handleListFetch = (boardId: string) => {\n        fetchLists(boardId).then((lists: ListType[]) => {\n            if (lists) {\n                Promise.all(lists.map(async(list:ListType) => {\n                    const cards = await getCardsByListId(list.id);   \n                    list.totalCard = cards.length;   \n                    list.cards = cards;               \n                    return list;\n                }))\n                .then((lists: ListType[]) => setListsTrello(lists));\n            }\n        });\n    };\n\n    useEffect(() => {\n        handleBoardFetch(boardId);\n        handleListFetch(boardId);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [boardId]);\n\n    return <div className=\"container\">\n        <div>\n            <div className=\"h1\">{boardTrello?.name}</div>\n            <Link to=\"/\" className=\"btn btn-link\">Back</Link>\n            <p><a href={boardTrello?.shortUrl} className=\"text-gray\" target=\"_blank\" rel=\"noopener noreferrer\">{boardTrello?.shortUrl}</a></p>            \n        </div>\n        \n        {listsTrello.map((list) => <TableListWithCards key={list.id} list={list} />)}\n    </div>\n}\n\nexport default Board;","import React from 'react';\n\ninterface EmptyProps {\n    title: string\n}\n\nconst Empty = (props: EmptyProps) => {\n    const { title } = props;\n    return <div className=\"empty\">\n        <div className=\"empty-icon\">\n            <i className=\"icon icon-people\"></i>\n        </div>\n        <p className=\"empty-title h5\">{title}</p>\n    </div>\n}\n\nexport default Empty;","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport Container from '../components/Container';\nimport { appKey } from '../utils/TrelloService';\n\nconst regexToken = /[&#]?token=([0-9a-f]{64})/;\n\nconst uri = 'http://trello.com/';\n\nconst Box = styled.div`\n    width: 300px;\n    height: 300px;\n`;\n\nconst params = {\n    name: \"Trello Report React\",\n    scope: 'read',\n    expiration: 'never',\n    response_type: 'token',\n    key: appKey,\n    callback_method: 'fragment',\n    interactive: 'true',\n    redirect_uri: window.location.href,\n    persist: 'true'\n};\n\nconst Login = () => {\n    const handleLogin = () => {\n        const URLparams = new URLSearchParams(Object.entries(params));\n        const url = `${uri}1/authorize?${URLparams.toString()}`;\n        window.location.href = url;\n    };\n\n    const isAuthorized = () => {\n        const tokenLocalStorage = localStorage.getItem('token') || '';\n        return tokenLocalStorage && tokenLocalStorage.length === 64;\n    };\n\n    const redirectToChoiceBoard = () => window.location.replace('/choice-board');\n\n    useEffect(() => {\n        if (isAuthorized()) {\n            redirectToChoiceBoard();\n        }\n        else {\n            const token = regexToken.exec(window.location.hash) || '';\n            if (token && token[1]) {\n                localStorage.setItem('token', token[1]);\n                redirectToChoiceBoard();\n            }\n        }\n    }, []);\n\n    return <Container>\n        <Box>\n            <div className=\"card\">\n                <div className=\"card-header\">\n                    <div className=\"card-title h5\">Login at Trello</div>\n                </div>\n                <div className=\"card-body\"></div>\n                <div className=\"card-footer\">\n                    <button className=\"btn btn-primary\" onClick={(e) => handleLogin()}>Login</button>\n                </div>\n            </div>\n        </Box>\n    </Container>\n}\n\nexport default Login;","import React from 'react';\nimport {\n    BrowserRouter,\n    Switch,\n    Route    \n} from \"react-router-dom\";\nimport ChoiceBoard from './pages/ChoiceBoard';\nimport Board from './pages/Board';\nimport Empty from './components/Empty';\nimport Container from './components/Container';\nimport Login from './pages/Login';\n\nconst NotFound = () => <Container><Empty title=\"Not Found\" /></Container>;\n\nconst App = () => {\n    return <>\n        <BrowserRouter>\n            <Switch>\n                <Route exact={true} path=\"/board/:boardId\">\n                    <Board />\n                </Route>\n                <Route exact={true} path=\"/choice-board\">\n                    <ChoiceBoard />\n                </Route>\n                <Route exact={true} path=\"/\">\n                    <Login />\n                </Route>\n                <Route exact={true} path='*' component={NotFound} />\n            </Switch>\n        </BrowserRouter>\n    </>\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'spectre.css';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}